# -*- coding: utf-8 -*-
"""engine_data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ljp0qidd3Ul9Qd0mbSju5jry1DYejL4K
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

data = pd.read_csv('engine_data.csv')
data.head()

data.info()

data.describe()

data.isnull().sum()

data.head()

data.columns = data.columns.str.strip().str.lower().str.replace(' ', '_')

data = data.dropna()

data = data.drop_duplicates()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaled_features = scaler.fit_transform(data[['engine_rpm', 'lub_oil_pressure', 'fuel_pressure',
                                             'coolant_pressure', 'lub_oil_temp', 'coolant_temp']])

scaled_data = pd.DataFrame(scaled_features, columns=['engine_rpm', 'lub_oil_pressure', 'fuel_pressure',
                                                     'coolant_pressure', 'lub_oil_temp', 'coolant_temp'])

data[['engine_rpm', 'lub_oil_pressure', 'fuel_pressure', 'coolant_pressure', 'lub_oil_temp', 'coolant_temp']] = scaled_data

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaled_features = scaler.fit_transform(data[['engine_rpm', 'lub_oil_pressure', 'fuel_pressure',
                                             'coolant_pressure', 'lub_oil_temp', 'coolant_temp']])

data[['engine_rpm', 'lub_oil_pressure', 'fuel_pressure', 'coolant_pressure', 'lub_oil_temp', 'coolant_temp']] = scaled_features

from sklearn.model_selection import train_test_split

X = data[['engine_rpm', 'lub_oil_pressure', 'fuel_pressure', 'coolant_pressure', 'lub_oil_temp', 'coolant_temp']]
y = data['engine_condition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training set size:", X_train.shape)
print("Testing set size:", X_test.shape)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(random_state=42)

model.fit(X_train, y_train)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

from sklearn.model_selection import GridSearchCV

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=3, scoring='accuracy')
grid_search.fit(X_train, y_train)

print("Best parameters:", grid_search.best_params_)
best_model = grid_search.best_estimator_

import matplotlib.pyplot as plt

importances = model.feature_importances_
feature_names = X.columns

plt.barh(feature_names, importances)
plt.xlabel('Importance')
plt.title('Feature Importance')
plt.show()

import joblib

joblib.dump(model, 'engine_condition_model.pkl')